{"version":3,"file":"main.js","mappings":"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","sources":["webpack://vmc-replay/webpack/bootstrap","webpack://vmc-replay/webpack/runtime/compat get default export","webpack://vmc-replay/webpack/runtime/define property getters","webpack://vmc-replay/webpack/runtime/hasOwnProperty shorthand","webpack://vmc-replay/external node-commonjs \"path\"","webpack://vmc-replay/external commonjs \"electron\"","webpack://vmc-replay/./src/menu/app_menu_template.js","webpack://vmc-replay/external node-commonjs \"fs\"","webpack://vmc-replay/external commonjs \"fs-jetpack\"","webpack://vmc-replay/./src/helpers/window.js","webpack://vmc-replay/external node-commonjs \"url\"","webpack://vmc-replay/./src/main-window.js","webpack://vmc-replay/./src/menu/file_menu_template.js","webpack://vmc-replay/./src/main.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { app } from \"electron\";\r\n\r\nexport default {\r\n  label: \"App\",\r\n  submenu: [\r\n    {\r\n      label: \"Quit\",\r\n      accelerator: \"CmdOrCtrl+Q\",\r\n      click: () => {\r\n        app.quit();\r\n      }\r\n    }\r\n  ]\r\n};\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs-jetpack\");","// This helper remembers the size and position of your windows, and restores\r\n// them in that place after app relaunch.\r\n// Can be used for more than one window, just construct many\r\n// instances of it and give each different name.\r\n\r\nimport { app, BrowserWindow, screen } from \"electron\";\r\nimport jetpack from \"fs-jetpack\";\r\n\r\nexport default (name, options) => {\r\n  const userDataDir = jetpack.cwd(app.getPath(\"userData\"));\r\n  const stateStoreFile = `window-state-${name}.json`;\r\n  const defaultSize = {\r\n    width: options.width,\r\n    height: options.height\r\n  };\r\n  let state = {};\r\n  let win;\r\n\r\n  const restore = () => {\r\n    let restoredState = {};\r\n    try {\r\n      restoredState = userDataDir.read(stateStoreFile, \"json\");\r\n    } catch (err) {\r\n      // For some reason json can't be read (might be corrupted).\r\n      // No worries, we have defaults.\r\n    }\r\n    return Object.assign({}, defaultSize, restoredState);\r\n  };\r\n\r\n  const getCurrentPosition = () => {\r\n    const position = win.getPosition();\r\n    const size = win.getSize();\r\n    return {\r\n      x: position[0],\r\n      y: position[1],\r\n      width: size[0],\r\n      height: size[1]\r\n    };\r\n  };\r\n\r\n  const windowWithinBounds = (windowState, bounds) => {\r\n    return (\r\n      windowState.x >= bounds.x &&\r\n      windowState.y >= bounds.y &&\r\n      windowState.x + windowState.width <= bounds.x + bounds.width &&\r\n      windowState.y + windowState.height <= bounds.y + bounds.height\r\n    );\r\n  };\r\n\r\n  const resetToDefaults = () => {\r\n    const bounds = screen.getPrimaryDisplay().bounds;\r\n    return Object.assign({}, defaultSize, {\r\n      x: (bounds.width - defaultSize.width) / 2,\r\n      y: (bounds.height - defaultSize.height) / 2\r\n    });\r\n  };\r\n\r\n  const ensureVisibleOnSomeDisplay = windowState => {\r\n    const visible = screen.getAllDisplays().some(display => {\r\n      return windowWithinBounds(windowState, display.bounds);\r\n    });\r\n    if (!visible) {\r\n      // Window is partially or fully not visible now.\r\n      // Reset it to safe defaults.\r\n      return resetToDefaults();\r\n    }\r\n    return windowState;\r\n  };\r\n\r\n  const saveState = () => {\r\n    if (!win.isMinimized() && !win.isMaximized()) {\r\n      Object.assign(state, getCurrentPosition());\r\n    }\r\n    userDataDir.write(stateStoreFile, state, { atomic: true });\r\n  };\r\n\r\n  state = ensureVisibleOnSomeDisplay(restore());\r\n\r\n  win = new BrowserWindow(Object.assign({}, options, state));\r\n\r\n  win.on(\"close\", saveState);\r\n\r\n  return win;\r\n};\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"url\");","import createWindow from \"./helpers/window\";\r\nimport url from \"url\";\r\nimport path from \"path\";\r\nimport env from \"env\";\r\n\r\nlet mainWindow;\r\n\r\nexport const init = () => {\r\n    mainWindow = createWindow(\"main\", {\r\n        width: 1000,\r\n        height: 600,\r\n        webPreferences: {\r\n            // Two properties below are here for demo purposes, and are\r\n            // security hazard. Make sure you know what you're doing\r\n            // in your production app.\r\n            nodeIntegration: true,\r\n            contextIsolation: false,\r\n            // Spectron needs access to remote module\r\n            enableRemoteModule: env.name === \"test\",\r\n            backgroundThrottling: false,\r\n        }\r\n    });\r\n\r\n    mainWindow.loadURL(\r\n        url.format({\r\n            pathname: path.join(__dirname, \"app.html\"),\r\n            protocol: \"file:\",\r\n            slashes: true\r\n        })\r\n    );\r\n\r\n    if (env.name === \"development\") {\r\n        mainWindow.openDevTools();\r\n    }\r\n};\r\n\r\nexport const refresh = () => {\r\n    mainWindow.webContents.send('re-render');\r\n};","import {shell, dialog} from \"electron\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {refresh} from '../main-window';\r\n\r\nconst PATH_TO_SETTINGS_DIRECTORY = path.join(process.env.APPDATA, '../LocalLow/swolekat/vmc-replay/');\r\n\r\nexport default {\r\n  label: \"File\",\r\n  submenu: [\r\n    { label: \"Open Saved File Location\",\r\n      click: () => {\r\n        shell.openPath(PATH_TO_SETTINGS_DIRECTORY);\r\n      }\r\n    },\r\n    { type: \"separator\" },\r\n    { label: \"Load from File\",\r\n      click: () => {\r\n        dialog.showOpenDialog({\r\n          filters: [\r\n            { name: 'JSON Files', extensions: ['json']}\r\n          ],\r\n          properties: ['openFile', 'multiSelections']\r\n        }).then(({canceled, filePaths}) => {\r\n          if(canceled){\r\n            return;\r\n          }\r\n          console.log(PATH_TO_SETTINGS_DIRECTORY);\r\n          console.log(filePaths.join(', '));\r\n          filePaths.forEach(path => {\r\n            const fileContents = fs.readFileSync(path);\r\n            const fileNameParts = path.split('\\\\');\r\n            const fileName = fileNameParts[fileNameParts.length -1];\r\n            fs.writeFileSync(`${PATH_TO_SETTINGS_DIRECTORY}\\\\${fileName}`, fileContents);\r\n          });\r\n          refresh();\r\n        });\r\n      }\r\n    },\r\n  ]\r\n};\r\n","// This is main process of Electron, started as first thing when your\r\n// app starts. It runs through entire life of your application.\r\n// It doesn't have any windows which you can see on screen, but we can open\r\n// window from here.\r\n\r\nimport path from \"path\";\r\nimport { app, Menu, ipcMain } from \"electron\";\r\nimport appMenuTemplate from \"./menu/app_menu_template\";\r\nimport fileMenuTemplate from \"./menu/file_menu_template\";\r\nimport devMenuTemplate from \"./menu/dev_menu_template\";\r\nimport fs from \"fs\";\r\nimport {init} from './main-window';\r\n\r\n// Special module holding environment variables which you declared\r\n// in config/env_xxx.json file.\r\nimport env from \"env\";\r\n\r\nconst PATH_TO_SETTINGS_DIRECTORY = path.join(process.env.APPDATA, '../LocalLow/swolekat/vmc-replay/');\r\n\r\nif(!fs.existsSync(PATH_TO_SETTINGS_DIRECTORY)){\r\n  fs.mkdirSync(PATH_TO_SETTINGS_DIRECTORY);\r\n}\r\n\r\n// Save userData in separate folders for each environment.\r\n// Thanks to this you can use production and development versions of the app\r\n// on same machine like those are two separate apps.\r\nif (env.name !== \"production\") {\r\n  const userDataPath = app.getPath(\"userData\");\r\n  app.setPath(\"userData\", `${userDataPath} (${env.name})`);\r\n}\r\n\r\nconst setApplicationMenu = () => {\r\n  const menus = [appMenuTemplate, fileMenuTemplate];\r\n  if (env.name !== \"production\") {\r\n    menus.push(devMenuTemplate);\r\n  }\r\n  Menu.setApplicationMenu(Menu.buildFromTemplate(menus));\r\n};\r\n\r\n// We can communicate with our window (the renderer process) via messages.\r\nconst initIpc = () => {\r\n  ipcMain.on(\"need-app-path\", (event, arg) => {\r\n    event.reply(\"app-path\", {\r\n      pathToSettingsDirectory: PATH_TO_SETTINGS_DIRECTORY,\r\n    });\r\n  });\r\n};\r\n\r\n\r\napp.on(\"ready\", () => {\r\n  setApplicationMenu();\r\n  initIpc();\r\n  init();\r\n});\r\n\r\napp.on(\"window-all-closed\", () => {\r\n  app.quit();\r\n});\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","require","label","submenu","accelerator","click","app","mainWindow","PATH_TO_SETTINGS_DIRECTORY","path","process","env","APPDATA","shell","type","dialog","filters","name","extensions","properties","then","canceled","filePaths","console","log","join","forEach","fileContents","fs","fileNameParts","split","fileName","length","webContents","send","menus","appMenuTemplate","fileMenuTemplate","Menu","setApplicationMenu","ipcMain","event","arg","reply","pathToSettingsDirectory","options","userDataDir","jetpack","stateStoreFile","defaultSize","width","height","win","state","windowState","visible","screen","some","display","bounds","x","y","windowWithinBounds","assign","resetToDefaults","ensureVisibleOnSomeDisplay","restoredState","read","err","restore","BrowserWindow","on","isMinimized","isMaximized","position","getPosition","size","getSize","getCurrentPosition","write","atomic","createWindow","webPreferences","nodeIntegration","contextIsolation","enableRemoteModule","backgroundThrottling","loadURL","url","pathname","__dirname","protocol","slashes"],"sourceRoot":""}